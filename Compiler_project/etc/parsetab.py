
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ANY ASPAS ASPAS2 BEGINEND ERROR FUNC GRAMM ID IGNORE LEX LIT PRECED REGEX RET RETVALUE SPACE TOIGNORE TOK TYPE YACparser : lex yacclex : '%' '%' LEX lexStats lexDefslexStats : lexStats lexStatlexStats : lexStatlexStat : LIT '=' '§' simbols '§' lexStat : TOK '=' '[' tokens ']' lexStat : IGNORE '=' TOIGNORE simbols :  simbols simbol simbols : simbolsimbol : '+' simbol : '-' simbol : '=' simbol : '/' simbol : '*' simbol : '(' simbol : ')' simbol : '[' simbol : ']' tokens : tokentokens : tokens ',' tokentoken : ASPAS ID ASPASlexDefs : lexDefs lexDeflexDefs : lexDeflexDef : REGEX RET '(' ASPAS2 ID ASPAS2 ',' valueRet ')' lexDef : ERRORvalueRet :  RETVALUE valueRet :  TYPE '(' RETVALUE ')' yacc : '%' '%' YAC precedence yaccGram yaccFimprecedence : PRECEDprecedence : yaccGram : yaccStatyaccGram : yaccGram yaccStat yaccStat : ID GRAMM FUNCyaccStat : ERRORyaccFim : ANY"
    
_lr_action_items = {'%':([0,2,3,5,17,19,21,29,68,],[3,5,6,7,-2,-23,-25,-22,-24,]),'$end':([1,4,34,36,],[0,-1,-28,-35,]),'LEX':([6,],[8,]),'YAC':([7,],[9,]),'LIT':([8,10,11,18,33,55,57,],[12,12,-4,-3,-7,-5,-6,]),'TOK':([8,10,11,18,33,55,57,],[13,13,-4,-3,-7,-5,-6,]),'IGNORE':([8,10,11,18,33,55,57,],[14,14,-4,-3,-7,-5,-6,]),'PRECED':([9,],[16,]),'ID':([9,15,16,25,26,28,35,52,53,54,],[-30,27,-29,27,-31,-34,-32,59,-33,60,]),'ERROR':([9,10,11,15,16,17,18,19,21,25,26,28,29,33,35,53,55,57,68,],[-30,21,-4,28,-29,21,-3,-23,-25,28,-31,-34,-22,-7,-32,-33,-5,-6,-24,]),'REGEX':([10,11,17,18,19,21,29,33,55,57,68,],[20,-4,20,-3,-23,-25,-22,-7,-5,-6,-24,]),'=':([12,13,14,31,39,40,41,42,43,44,45,46,47,48,49,56,],[22,23,24,39,-12,39,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'RET':([20,],[30,]),'§':([22,39,40,41,42,43,44,45,46,47,48,49,56,],[31,-12,55,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'[':([23,31,39,40,41,42,43,44,45,46,47,48,49,56,],[32,48,-12,48,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'TOIGNORE':([24,],[33,]),'ANY':([25,26,28,35,53,],[36,-31,-34,-32,-33,]),'GRAMM':([27,],[37,]),'(':([30,31,39,40,41,42,43,44,45,46,47,48,49,56,67,],[38,46,-12,46,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,69,]),'+':([31,39,40,41,42,43,44,45,46,47,48,49,56,],[42,-12,42,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'-':([31,39,40,41,42,43,44,45,46,47,48,49,56,],[43,-12,43,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'/':([31,39,40,41,42,43,44,45,46,47,48,49,56,],[44,-12,44,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),'*':([31,39,40,41,42,43,44,45,46,47,48,49,56,],[45,-12,45,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,]),')':([31,39,40,41,42,43,44,45,46,47,48,49,56,65,66,70,71,],[47,-12,47,-9,-10,-11,-13,-14,-15,-16,-17,-18,-8,68,-26,71,-27,]),']':([31,39,40,41,42,43,44,45,46,47,48,49,50,51,56,61,62,],[49,-12,49,-9,-10,-11,-13,-14,-15,-16,-17,-18,57,-19,-8,-20,-21,]),'ASPAS':([32,58,59,],[52,52,62,]),'FUNC':([37,],[53,]),'ASPAS2':([38,60,],[54,63,]),',':([50,51,61,62,63,],[58,-19,-20,-21,64,]),'RETVALUE':([64,69,],[66,70,]),'TYPE':([64,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parser':([0,],[1,]),'lex':([0,],[2,]),'yacc':([2,],[4,]),'lexStats':([8,],[10,]),'lexStat':([8,10,],[11,18,]),'precedence':([9,],[15,]),'lexDefs':([10,],[17,]),'lexDef':([10,17,],[19,29,]),'yaccGram':([15,],[25,]),'yaccStat':([15,25,],[26,35,]),'yaccFim':([25,],[34,]),'simbols':([31,],[40,]),'simbol':([31,40,],[41,56,]),'tokens':([32,],[50,]),'token':([32,58,],[51,61,]),'valueRet':([64,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parser","S'",1,None,None,None),
  ('parser -> lex yacc','parser',2,'p_parserLex','parser.py',6),
  ('lex -> % % LEX lexStats lexDefs','lex',5,'p_lex_inicio','parser.py',10),
  ('lexStats -> lexStats lexStat','lexStats',2,'p_lexStatements','parser.py',14),
  ('lexStats -> lexStat','lexStats',1,'p_lexStatements_one','parser.py',18),
  ('lexStat -> LIT = § simbols §','lexStat',5,'p_lexStatement_literals','parser.py',23),
  ('lexStat -> TOK = [ tokens ]','lexStat',5,'p_lexStatement_tokens','parser.py',28),
  ('lexStat -> IGNORE = TOIGNORE','lexStat',3,'p_lexStatement_ignore','parser.py',32),
  ('simbols -> simbols simbol','simbols',2,'p_simbols','parser.py',36),
  ('simbols -> simbol','simbols',1,'p_simbols_one','parser.py',40),
  ('simbol -> +','simbol',1,'p_simbol_mais','parser.py',44),
  ('simbol -> -','simbol',1,'p_simbol_menos','parser.py',48),
  ('simbol -> =','simbol',1,'p_simbol_igual','parser.py',52),
  ('simbol -> /','simbol',1,'p_simbol_bar','parser.py',56),
  ('simbol -> *','simbol',1,'p_simbol_asterisc','parser.py',60),
  ('simbol -> (','simbol',1,'p_simbol_pa','parser.py',64),
  ('simbol -> )','simbol',1,'p_simbol_pf','parser.py',68),
  ('simbol -> [','simbol',1,'p_simbol_ca','parser.py',72),
  ('simbol -> ]','simbol',1,'p_simbol_cf','parser.py',76),
  ('tokens -> token','tokens',1,'p_tokens_single','parser.py',82),
  ('tokens -> tokens , token','tokens',3,'p_tokens_varios','parser.py',86),
  ('token -> ASPAS ID ASPAS','token',3,'p_token','parser.py',90),
  ('lexDefs -> lexDefs lexDef','lexDefs',2,'p_lex_defs','parser.py',95),
  ('lexDefs -> lexDef','lexDefs',1,'p_lex_defs_one','parser.py',99),
  ('lexDef -> REGEX RET ( ASPAS2 ID ASPAS2 , valueRet )','lexDef',9,'p_lex_def','parser.py',103),
  ('lexDef -> ERROR','lexDef',1,'p_lex_def_error','parser.py',114),
  ('valueRet -> RETVALUE','valueRet',1,'p_lex_valueret_simple','parser.py',118),
  ('valueRet -> TYPE ( RETVALUE )','valueRet',4,'p_lex_withType','parser.py',122),
  ('yacc -> % % YAC precedence yaccGram yaccFim','yacc',6,'p_yacc','parser.py',128),
  ('precedence -> PRECED','precedence',1,'p_precedence','parser.py',132),
  ('precedence -> <empty>','precedence',0,'p_no_precedence','parser.py',150),
  ('yaccGram -> yaccStat','yaccGram',1,'p_yaccGram_one','parser.py',155),
  ('yaccGram -> yaccGram yaccStat','yaccGram',2,'p_yaccGram_stats','parser.py',159),
  ('yaccStat -> ID GRAMM FUNC','yaccStat',3,'p_yaccGram_stat','parser.py',163),
  ('yaccStat -> ERROR','yaccStat',1,'p_yaccGram_stat_error','parser.py',167),
  ('yaccFim -> ANY','yaccFim',1,'p_yaccFim','parser.py',171),
]
