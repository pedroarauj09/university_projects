%% LEX 

literals = ยง+-=/*()ยง
tokens = ['VAR', 'NUMBER'] 
ignore = ' \t\n'

r'[a-zA-Z_][a-zA-Z0-9_]*' return("VAR", t.value)
r'\d+(\.\d+)?' return("NUMBER", float(t.value))
error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1))

%% YACC

precedence = [('left','+','-'),('left','*','/'),('right','UMINUS')]

atrib -> stat : VAR '=' exp => { t.y.ts[t[1]] = t[3]  }
statExp -> stat : exp => { print(t[1]) }
plus -> exp : exp '+' exp => { t[0] = t[1] + t[3] }
minus -> exp : exp '-' exp => { t[0] = t[1] - t[3] }
mult -> exp : exp '*' exp => { t[0] = t[1] * t[3] }
div -> exp : exp '/' exp => { t[0] = t[1] / t[3] }
uminus -> exp : '-' exp %prec UMINUS => { t[0] = -t[2] }
expPar -> exp : '(' exp ')' => { t[0] = t[2] }
expNumber -> exp : NUMBER => { t[0] = t[1] }
expVAR -> exp : VAR => { t[0] = getval(t[1]) }

error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1))

@
def getval(n):
    if n not in y.ts: 
        print(f"Undefined name '{n}'")
    return y.ts.get(n,0)

y=yacc.yacc()
y.ts = {}
y.parse("3+4*7")
@